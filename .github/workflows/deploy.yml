stages:
  - login
  - build
  - install_kubectl
  - deploy
  - deploy_to_cluster

variables:
  AWS_DEFAULT_REGION: $CI_AWS_REGION  # Set the AWS region (GitLab variable)
  CLUSTER_NAME: $CI_EKS_CLUSTER_NAME  # Set the EKS cluster name (GitLab variable)
  ECR_REPOSITORY: $CI_ECR_REPOSITORY  # Set your ECR repository name (GitLab variiable)
  IMAGE_TAG: $CI_COMMIT_REF_NAME  # GitLab default for branch name
  AWS_ACCOUNT_ID: $CI_AWS_ACCOUNT_ID  # Set your AWS Account ID (GitLab variable)
  

# Step 1: AWS Authentication and Setup
login_to_aws:
  stage: login
  image: amazon/aws-cli:latest  # AWS CLI image for login
  script:
    - echo "Getting AWS account information"
    - aws sts get-caller-identity
  only:
    - main  # Trigger this job only for the main branch
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION

# Step 2: Pull NGINX image and push to ECR
build_and_push_to_ecr:
  stage: build
  image: docker:20.10.7  # Docker image for building and pushing
  services:
    - docker:dind
  script:
    - echo "Logging into AWS ECR"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
    - echo "Pulling NGINX image from Docker Hub"
    - docker pull nginx:latest  # Pull the official NGINX image
    - echo "Tagging NGINX image for ECR"
    - docker tag nginx:latest 992382840772.dkr.ecr.eu-north-1.amazonaws.com/merchant_api/:$IMAGE_TAG   # Tagging the image
    - echo "Pushing NGINX image to ECR"
    - docker push 992382840772.dkr.ecr.eu-north-1.amazonaws.com/merchant_api/:$IMAGE_TAG  # Push the image to ECR
  only:
    - main  # Trigger this job only for the main branch

# Step 3: Install kubectl
install_kubectl:
  stage: install_kubectl
  image: ubuntu:20.04  # Ubuntu image for installing kubectl
  before_script:
    - apt-get update && apt-get install -y curl unzip
  script:
    - echo "Installing kubectl"
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
  only:
    - main  # Trigger this job only for the main branch

# Step 4: Configure kubectl for EKS and Deploy to the Cluster
deploy_to_eks:
  stage: deploy
  image: lachlanevenson/k8s-kubectl:latest  # Kubernetes kubectl image for deployment
  script:
    - echo "Configuring kubectl for EKS"
    - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME
    - kubectl get nodes
    - echo "Deploying to EKS"
    - sed -i "s|REPOSITORY_TAG|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" ./deploy.yaml  # Replace the placeholder in deployment.yaml
    - kubectl apply -f ./deploy.yaml  # Apply the updated deployment.yaml to the cluster
  only:
    - main  # Trigger this job only for the main branch
  needs:
    - build_and_push_to_ecr  # Ensure this job runs only after the image is pushed to ECR
